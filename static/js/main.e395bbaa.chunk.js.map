{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","placeholder","Recipes","recipes","map","recipe","key","idDrink","src","strDrinkThumb","alt","strDrink","length","concat","substring","react_router_dom","to","pathname","state","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","drinks","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","this","components_Recipes","Component","Recipe","activeRecipe","title","req","res","location","console","log","strIngredient","Object","keys","ingredient","startsWith","measure","strInstructions","React","Router","basename","process","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e395bbaa.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\" }}>\r\n        <input className=\"form__input\" type=\"text\" name=\"recipeName\" placeholder=\"name...\"/>\r\n        <button className=\"form__button\">Search</button>\r\n    </form>\r\n)\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Recipes = props => (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            { props.recipes.map((recipe) => {\r\n                return (\r\n                    <div key={recipe.idDrink} className=\"col-md-4\" style={{ marginBottom: \"2rem\" }}>\r\n                        <div className=\"recipes__box\">\r\n                            <img\r\n                                className=\"recipe__box-img\"\r\n                                src={recipe.strDrinkThumb}\r\n                                alt={recipe.strDrink}/> \r\n                            <div className=\"recipe__text\">\r\n                                <h5 className=\"recipes__title\">\r\n                                    { recipe.strDrink.length < 20 ? `${recipe.strDrink}` : \r\n                                    `${recipe.strDrink.substring(0, 25)}...` }\r\n                                </h5>\r\n                            </div>\r\n                            <button className=\"recipe__buttons\">\r\n                                <Link to={{ \r\n                                    pathname: `/recipe/${recipe.idDrink}`,\r\n                                    state:{ recipe: recipe.strDrink }\r\n                                }}>View Recipe</Link>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }) }\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Recipes","import React, { Component } from 'react'\nimport './App.css'\nimport Form from \"./components/Form\"\nimport Recipes from \"./components/Recipes\"\n\nclass App extends Component {\n  state = {\n    recipes : []\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value\n    e.preventDefault()\n    const api_call = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${recipeName}`)\n\n    const data = await api_call.json()\n    this.setState({ recipes: data.drinks })\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipe\")\n    const recipes = JSON.parse(json)\n    this.setState({recipes: recipes})\n  }\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes)\n    localStorage.setItem(\"recipe\", recipes)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe}/>\n        { this.state.recipes !== null && <Recipes recipes={this.state.recipes}/> }\n      </div>\n    )\n  }\n}\n\nexport default App","import React from \"react\"\r\n\r\nimport { Link } from \"react-router-dom\"\r\n\r\nclass Recipe extends React.Component {\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const title = this.props.location.state.recipe\r\n        const req = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${title}`)\r\n\r\n        const res= await req.json()\r\n        this.setState({activeRecipe: res.drinks[0]})\r\n    }\r\n\r\n    render() {\r\n        const recipe = this.state.activeRecipe\r\n        console.log(recipe)\r\n        console.log(recipe.strIngredient)\r\n        \r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {\r\n                    this.state.activeRecipe.length !== 0 &&\r\n                    <div className=\"active-recipe\">\r\n                        <img className=\"recipe__box-img\" src={recipe.strDrinkThumb} alt={recipe.strDrink}/>\r\n                        <h3 className=\"active-recipe__title\">{ recipe.strDrink }</h3>\r\n                        <p className=\"active-recipe__website\"> Ingredients:</p>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-xs-5 ingredient-container\">\r\n                                    { Object.keys(recipe).map((ingredient) => {\r\n                                        if (ingredient.startsWith(\"strIngredient\") && recipe[ingredient] !== null)\r\n                                            return (\r\n                                                <div>\r\n                                                    {recipe[ingredient] + \"\\n\"}\r\n                                                </div>\r\n                                            )\r\n                                    }) }\r\n                                </div>\r\n                                <div className=\"col-xs-5 measure-container\">\r\n                                    { Object.keys(recipe).map((measure) => {\r\n                                        if (measure.startsWith(\"strMeasure\") && recipe[measure] !== null)\r\n                                            return (\r\n                                                <div>\r\n                                                    {recipe[measure] + \"\\n\"}\r\n                                                </div>\r\n                                            )\r\n                                    }) }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <p className=\"active-recipe__website\"> Instruction:</p>\r\n                        <p className=\"active-recipe__text\"> { recipe.strInstructions }</p>\r\n                        <button className=\"active-recipe__button\">\r\n                            <Link to={{ \r\n                                    pathname: `/`\r\n                                }}>Go Home</Link>\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recipe","import React from \"react\"\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\n\r\nimport App from \"../App\"\r\nimport Recipe from \"./Recipe\"\r\n\r\nconst Router = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}> \r\n        <Switch> \r\n            <Route path=\"/\" component={App} exact/>\r\n            <Route path=\"/recipe/:id\" component={Recipe} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}